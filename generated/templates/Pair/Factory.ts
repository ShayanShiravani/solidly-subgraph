// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PairCreated extends ethereum.Event {
  get params(): PairCreated__Params {
    return new PairCreated__Params(this);
  }
}

export class PairCreated__Params {
  _event: PairCreated;

  constructor(event: PairCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stable(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get pair(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get param4(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Factory__getInitializableResult {
  value0: Address;
  value1: Address;
  value2: boolean;

  constructor(value0: Address, value1: Address, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  allPairs(param0: BigInt): Address {
    let result = super.call("allPairs", "allPairs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allPairs(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allPairs", "allPairs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPairsLength(): BigInt {
    let result = super.call("allPairsLength", "allPairsLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allPairsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allPairsLength",
      "allPairsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createPair(tokenA: Address, tokenB: Address, stable: boolean): Address {
    let result = super.call(
      "createPair",
      "createPair(address,address,bool):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable)
      ]
    );

    return result[0].toAddress();
  }

  try_createPair(
    tokenA: Address,
    tokenB: Address,
    stable: boolean
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPair",
      "createPair(address,address,bool):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInitializable(): Factory__getInitializableResult {
    let result = super.call(
      "getInitializable",
      "getInitializable():(address,address,bool)",
      []
    );

    return new Factory__getInitializableResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBoolean()
    );
  }

  try_getInitializable(): ethereum.CallResult<Factory__getInitializableResult> {
    let result = super.tryCall(
      "getInitializable",
      "getInitializable():(address,address,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__getInitializableResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBoolean()
      )
    );
  }

  getPair(param0: Address, param1: Address, param2: boolean): Address {
    let result = super.call(
      "getPair",
      "getPair(address,address,bool):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromBoolean(param2)
      ]
    );

    return result[0].toAddress();
  }

  try_getPair(
    param0: Address,
    param1: Address,
    param2: boolean
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPair",
      "getPair(address,address,bool):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromBoolean(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isPair(param0: Address): boolean {
    let result = super.call("isPair", "isPair(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isPair(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPair", "isPair(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pairCodeHash(): Bytes {
    let result = super.call("pairCodeHash", "pairCodeHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_pairCodeHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("pairCodeHash", "pairCodeHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pauser(): Address {
    let result = super.call("pauser", "pauser():(address)", []);

    return result[0].toAddress();
  }

  try_pauser(): ethereum.CallResult<Address> {
    let result = super.tryCall("pauser", "pauser():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingPauser(): Address {
    let result = super.call("pendingPauser", "pendingPauser():(address)", []);

    return result[0].toAddress();
  }

  try_pendingPauser(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingPauser",
      "pendingPauser():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptPauserCall extends ethereum.Call {
  get inputs(): AcceptPauserCall__Inputs {
    return new AcceptPauserCall__Inputs(this);
  }

  get outputs(): AcceptPauserCall__Outputs {
    return new AcceptPauserCall__Outputs(this);
  }
}

export class AcceptPauserCall__Inputs {
  _call: AcceptPauserCall;

  constructor(call: AcceptPauserCall) {
    this._call = call;
  }
}

export class AcceptPauserCall__Outputs {
  _call: AcceptPauserCall;

  constructor(call: AcceptPauserCall) {
    this._call = call;
  }
}

export class CreatePairCall extends ethereum.Call {
  get inputs(): CreatePairCall__Inputs {
    return new CreatePairCall__Inputs(this);
  }

  get outputs(): CreatePairCall__Outputs {
    return new CreatePairCall__Outputs(this);
  }
}

export class CreatePairCall__Inputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class CreatePairCall__Outputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetPauseCall extends ethereum.Call {
  get inputs(): SetPauseCall__Inputs {
    return new SetPauseCall__Inputs(this);
  }

  get outputs(): SetPauseCall__Outputs {
    return new SetPauseCall__Outputs(this);
  }
}

export class SetPauseCall__Inputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }

  get _state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPauseCall__Outputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }
}

export class SetPauserCall extends ethereum.Call {
  get inputs(): SetPauserCall__Inputs {
    return new SetPauserCall__Inputs(this);
  }

  get outputs(): SetPauserCall__Outputs {
    return new SetPauserCall__Outputs(this);
  }
}

export class SetPauserCall__Inputs {
  _call: SetPauserCall;

  constructor(call: SetPauserCall) {
    this._call = call;
  }

  get _pauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPauserCall__Outputs {
  _call: SetPauserCall;

  constructor(call: SetPauserCall) {
    this._call = call;
  }
}
